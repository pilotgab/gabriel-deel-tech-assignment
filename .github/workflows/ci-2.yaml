name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Linting
        run: flake8 .

  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Tag Docker Image
        id: build-image
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  trivy-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Trivy
        run: |
          sudo apt-get install -y jq
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.20.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.20.2_Linux-64bit.deb

      - name: Run Trivy Scan
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          trivy image --format template --template "@/contrib/junit.tpl" -o trivy-report.xml $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v2
        with:
          name: trivy-report
          path: trivy-report.xml

  test:
    needs: trivy-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          pip install pytest
          pytest --maxfail=1 --disable-warnings

      - name: Check Coverage
        run: |
          pip install pytest-cov
          pytest --cov=your_module --cov-fail-under=80

  integration-test:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Integration Tests
        run: |
          pip install pytest
          pytest tests/integration

  push-to-ecr:
    needs: integration-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Docker Image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  update-helm:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Update Helm Values
        run: |
          sed -i "s/tag:.*/tag: $IMAGE_TAG/" path/to/your/values.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add path/to/your/values.yaml
          git commit -m "Update image tag to $IMAGE_TAG"
          git push
